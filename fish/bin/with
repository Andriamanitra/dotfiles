#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys
from typing import NoReturn


def abort(msg: str = "") -> NoReturn:
    if msg:
        print(msg, file=sys.stderr)
    exit(1)


def display_info(msg: str) -> None:
    FAINT_COLOR = "\033[2m"
    RESET_COLOR = "\033[0m"
    print(f" {FAINT_COLOR}[with] {msg}{RESET_COLOR}")


def kill_nicely(proc: subprocess.Popen, timeout_seconds: float = 1.0) -> None:
    for signal_name, signal_num in (("SIGINT", 2), ("SIGTERM", 15), ("SIGKILL", 9)):
        try:
            display_info(f"Killing subprocess with {signal_name}")
            proc.send_signal(signal_num)
            proc.wait(timeout_seconds)
            return
        except subprocess.TimeoutExpired:
            display_info("Subprocess is still alive!")


def main() -> None:
    if len(sys.argv) < 2:
        abort("Usage: with CMD [ARGS...]")

    _, cmd, *args = sys.argv

    executable = shutil.which(cmd)
    if executable is None:
        abort(f"Executable {cmd!r} not found in $PATH")

    display_info(f"Running subprocess {cmd!r} with {args=} in the background")
    with subprocess.Popen(
            [executable, *args],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
    ) as proc:
        env = dict(os.environ)
        pre_prompt = os.environ.get("PRE_PROMPT", "")
        env["PRE_PROMPT"] = f"[with {cmd}] {pre_prompt}"
        try:
            proc.wait(0.01)
        except subprocess.TimeoutExpired:
            subprocess.call(os.getenv("SHELL", "sh"), env=env)
            kill_nicely(proc)
            exit(0)
        else:
            stderr = proc.stderr.read().decode("utf-8")
            print(stderr.removesuffix("\n"))
            abort(f"Subprocess terminated (exit code {proc.returncode})")
        finally:
            if os.getenv("WITH_OUTPUT"):
                output = proc.stdout.read().decode("utf-8")
                if output:
                    display_info("Subprocess stdout:")
                    print(output)
                else:
                    display_info("Subprocess stdout: ''")


if __name__ == "__main__":
    main()
