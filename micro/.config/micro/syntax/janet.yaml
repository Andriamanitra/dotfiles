filetype: janet

detect: 
    filename: "\\.janet$"

rules:
    - default: "[a-z-?]+"
    - constant: "\\b(nil|true|false)\\b"
    - default: "[a-z-]+[?]"
    - identifier: "(defn|defmacro)\\s+\\S+"
    - lightblue: "(def|var)\\s+[A-Za-z\\-0-9?/_]+"
    - statement: "\\b(def|var|defn|defmacro)\\b"
    - symbol.operator: "@"
    - symbol.brackets: "([(){}]|\\[|\\])"
    
    - salmon: ":[A-Za-z0-9\\-:]+"
    - purple: "\\b(if|do|cond|try|forever|fn|while|quote|quasiquote|unquote|splice|set|break|print)\\b"

    # decimal number
    - constant.number: "[-+]?([0-9_]+|[0-9_]+\\.[0-9_]*|\\.[0-9_]+)([eE&][+-]?[0-9]+)?"
    # hexadecimal number
    - constant.number: "[-+]?0x([A-Fa-f0-9_]+|[A-Fa-f0-9_]+\\.[A-Fa-f0-9_]*|\\.[A-Fa-f0-9_]+)(&[+-]?[A-Fa-f0-9]+)?"
    # r-number
    - constant.number: "[-+]?[0-9][0-9]?r([A-Za-z0-9_]+|[A-Za-z0-9_]+\\.[A-Za-z0-9_]*|\\.[A-Za-z0-9_]+)"

    - constant.string:
        start: "\""
        end: "\""
        rules: []

    - constant.string:
        start: "```"
        end: "```"
        rules: []

    - constant.string:
        start: "``"
        end: "``"
        rules: []

    - constant.string:
        start: "`"
        end: "`"
        rules: []

    - comment:
        start: "#"
        end: "$"
        rules: []
